apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName '1.0.9'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    resolutionStrategy {
        force 'androidx.core:core-ktx:1.6.0'
    }
}


dependencies {
    compileOnly 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    compileOnly files('libs/classes.jar')
    compileOnly 'androidx.recyclerview:recyclerview:1.1.0'
    compileOnly 'androidx.appcompat:appcompat:1.3.1'
    compileOnly 'androidx.core:core:1.5.0'
    compileOnly 'com.google.android.material:material:1.4.0'
    compileOnly('com.github.methinksBot:methinks-android-rtc-sdk:1.1.6') {
        transitive = true
    }
    compileOnly 'androidx.constraintlayout:constraintlayout:2.0.4'
    compileOnly 'com.squareup.okhttp3:okhttp:3.9.1'

    // module
    implementation project(':mtk-common')
    implementation project(':mtk-inappsurvey')
    implementation project(':mtk-forum')

    // If host is using toysdk
    //implementation name: 'toysdk', ext: 'aar'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.10"
}


// JCenter publish
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// Optional docs
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// Optional javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar // Optional
    archives sourcesJar
}

task findConventions {
    println project.getConvention()
}
